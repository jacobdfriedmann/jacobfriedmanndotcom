<?php/** * Theme functions and definitions *  *//** Tell WordPress to run jboil_setup() when the 'after_setup_theme' hook is run. */add_action( 'after_setup_theme', 'jboil_setup' );if ( ! function_exists( 'jboil_setup' ) ):function jboil_setup() {	// This theme styles the visual editor with editor-style.css to match the theme style.	add_editor_style();	// This theme uses post thumbnails	add_theme_support( 'post-thumbnails' );	// Add default posts and comments RSS feed links to head	add_theme_support( 'automatic-feed-links' );	// Make theme available for translation	// Translations can be filed in the /languages/ directory	load_theme_textdomain( 'jboil', TEMPLATEPATH . '/languages' );	$locale = get_locale();	$locale_file = TEMPLATEPATH . "/languages/$locale.php";	if ( is_readable( $locale_file ) )		require_once( $locale_file );	// This theme uses wp_nav_menu() in one location.	register_nav_menus( array(		'primary' => __( 'Primary Navigation', 'jboil' ),	) );}endif;// Get our wp_nav_menu() fallback, wp_page_menu(), to show a home link.function jboil_page_menu_args( $args ) {	$args['show_home'] = true;	return $args;}add_filter( 'wp_page_menu_args', 'jboil_page_menu_args' );// Returns a "Continue Reading" link for excerptsfunction jboil_continue_reading_link() {	return ' <a href="'. get_permalink() . '">' . __( '&hellip; Continue reading <span class="meta-nav">&rarr;</span>', 'jboil' ) . '</a>';}/** * Replaces "[...]" (appended to automatically generated excerpts) with nothing and jboil_continue_reading_link(). */function jboil_auto_excerpt_more( $more ) {	return ' ';}add_filter( 'excerpt_more', 'jboil_auto_excerpt_more' );// Adds a pretty "Continue Reading" link to custom post excerpts.function jboil_custom_excerpt_more( $output ) {	if ( ! is_attachment() ) {		$output .= jboil_continue_reading_link();	}	return $output;}add_filter( 'get_the_excerpt', 'jboil_custom_excerpt_more' );// Remove inline styles printed when the gallery shortcode is used.function jboil_remove_gallery_css( $css ) {	return preg_replace( "#<style type='text/css'>(.*?)</style>#s", '', $css );}add_filter( 'gallery_style', 'jboil_remove_gallery_css' );//Register widgetized areas, including two sidebars and four widget-ready columns in the footer.function jboil_widgets_init() {	// Area 1, located at the top of the sidebar.	register_sidebar( array(		'name' => __( 'Primary Widget Area', 'jboil' ),		'id' => 'primary-widget-area',		'description' => __( 'The primary widget area', 'jboil' ),		'before_widget' => '<li id="%1$s" class="jboil-widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="jboil-widget-title">',		'after_title' => '</h3>',	) );}// Register sidebars by running jboil_widgets_init() on the widgets_init hook.add_action( 'widgets_init', 'jboil_widgets_init' );// Removes the default styles that are packaged with the Recent Comments widget.function jboil_remove_recent_comments_style() {	global $wp_widget_factory;	remove_action( 'wp_head', array( $wp_widget_factory->widgets['WP_Widget_Recent_Comments'], 'recent_comments_style' ) );}add_action( 'widgets_init', 'jboil_remove_recent_comments_style' );// Prints HTML with meta information for the current post (category, tags and permalink).if ( ! function_exists( 'jboil_posted_in' ) ) :function jboil_posted_in() {	// Retrieves tag list of current post, separated by commas.	$tag_list = get_the_tag_list( '', ', ' );	if ( $tag_list ) {		$posted_in = __( 'This entry was posted in %1$s and tagged %2$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'jboil' );	} elseif ( is_object_in_taxonomy( get_post_type(), 'category' ) ) {		$posted_in = __( 'This entry was posted in %1$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'jboil' );	} else {		$posted_in = __( 'Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'jboil' );	}	// Prints the string, replacing the placeholders.	printf(		$posted_in,		get_the_category_list( ', ' ),		$tag_list,		get_permalink(),		the_title_attribute( 'echo=0' )	);}endif;// Shortcodesadd_shortcode('wp_caption', 'jboil_img_caption_shortcode');add_shortcode('caption', 'jboil_img_caption_shortcode'); // Prints HTML with meta information for the current post—date/time and author.function jboil_img_caption_shortcode($attr, $content = null) {	extract(shortcode_atts(array(		'id'	=> '',		'align'	=> 'alignnone',		'width'	=> '',		'caption' => ''	), $attr));	if ( 1 > (int) $width || empty($caption) )		return $content;	if ( $id ) $idtag = 'id="' . esc_attr($id) . '" ';	$align = 'class="' . esc_attr($align) . '" ';	return '<figure ' . $idtag . $align . 'aria-describedby="figcaption_' . $id . '" style="width: ' . (10 + (int) $width) . 'px">' . do_shortcode( $content ) . '<figcaption id="figcaption_' . $id . '">' . $caption . '</figcaption></figure>';}//Prints HTML with meta information for the current post—date/time and author. if ( ! function_exists( 'jboil_posted_on' ) ) :function jboil_posted_on() {		printf( __( 'Posted on %2$s by %3$s', 'jboil' ),			'meta-prep meta-prep-author',			sprintf( '<a href="%1$s" rel="bookmark"><time datetime="%2$s" pubdate>%3$s</time></a>',			get_permalink(),			get_the_date('c'),			get_the_date()		),		sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',			get_author_posts_url( get_the_author_meta( 'ID' ) ),			sprintf( esc_attr__( 'View all posts by %s', 'jboil' ), get_the_author() ),			get_the_author()		)	);}endif;// Custom Sidebar Widget for displaying recent postsclass JBoil_RecentPosts_Widget extends WP_Widget {	public function __construct() {		parent::__construct(			'jboil_recentposts_widget', // Base ID			'jBoil Recent Posts', // Name			array( 'description' => 'A jBoil Widget') // Args		);	}	public function widget( $args, $instance ) {		$title = "Recent Posts";		echo $args['before_widget'];		if ( ! empty( $title ) )			echo $args['before_title'] . $title . $args['after_title'];			echo "<div class='row'>";				echo "<div class='col-md-12 col-sm-4 col-xs-6'>";					echo "<ul class='jboil-widget-list'>";							echo jboil_get_recent_posts_list(5);					echo "</ul>";				echo "</div>";				echo "<div class='col-md-12 col-sm-4 col-xs-6'>";					echo "<ul class='jboil-widget-list'>";							echo jboil_get_recent_posts_list(5,2);					echo "</ul>";				echo "</div>";				echo "<div class='col-md-12 col-sm-4 col-xs-6 hidden-xs'>";					echo "<ul class='jboil-widget-list'>";							echo jboil_get_recent_posts_list(5,3);					echo "</ul>";				echo "</div>";			echo "</div>";		echo $args['after_widget'];	} 	public function form( $instance ) {		echo "jBoil Recent Posts.";	}	public function update( $new_instance, $old_instance ) {		// processes widget options to be saved	}	}function jboil_get_recent_posts_list($num, $paged=1) {	query_posts('posts_per_page='.$num."&paged=".$paged);	// the Loop	while (have_posts()) : the_post();		$category = get_the_category();		?>		<li class="<?php echo $category[0]->slug; ?>_color"><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></li>	<?php endwhile;	wp_reset_query();}function register_jboil_widget() {    register_widget( 'JBoil_RecentPosts_Widget' );}add_action( 'widgets_init', 'register_jboil_widget' );// This tells WordPress to call the function named "jboil_setup_theme_admin_menus"// when it's time to create the menu pages.function jboil_setup_theme_admin_menus() {    add_submenu_page('themes.php',         'Theme Settings', 'Theme Settings', 'manage_options',         'theme-settings', 'jboil_custom_theme_settings_page'); }add_action("admin_menu", "jboil_setup_theme_admin_menus");// Theme Settings Pagefunction jboil_custom_theme_settings_page() {	$categories = get_categories();	if (isset($_POST["options_updated"])) {		foreach ($categories as $category) {			$color = $_POST[$category->slug.'_color'];			update_option($category->slug.'_color', $color);		}		update_option('header_name', $_POST['header_name']); 		update_option('copyright_text', $_POST['copyright_text']); 		update_option('tagline', $_POST['tagline']);		update_option('facebook', $_POST['facebook']);		update_option('twitter', $_POST['twitter']);		update_option('linkedin', $_POST['linkedin']);		jboil_write_custom_styles($categories);	}	require_once("theme-settings.php");}// Create custom css from database optionsfunction jboil_write_custom_styles($categories) {	if (!$categories) {		$categories = get_categories();	}	$css = "";	$smallcss = "@media (max-width: 767px) { ";	foreach ($categories as $category) {		$color = get_option($category->slug);		$css .= ".nav-justified .".$category->slug."_color:hover a, .current-menu-item.".$category->slug."_color a, .current-menu-parent.".$category->slug."_color a, li.".$category->slug."_color, .".$category->slug."_color:hover a { color:".$color."!important; } ";		$smallcss .= ".category-".$category->slug." .jboil-archive-detail:not(.jboil-no-thumb) { background: rgba(".hex2rgb($color).") }";	}	$file = get_stylesheet_directory()."/css/custom-style.css";	$smallcss .= " }";	file_put_contents($file, $css." ".$smallcss);}add_action( 'wp_enqueue_scripts', 'jboil_write_custom_styles' );// Add Custom classes to menu items for colorsfunction jboil_nav_class_colors($classes, $item){	$slug = get_category($item->object_id)->slug;	if ($slug) {		$classes[] = $slug.'_color';	}    return $classes;}add_filter('nav_menu_css_class' , 'jboil_nav_class_colors' , 10 , 2);// Ajax function to load more postsfunction jboil_load_more() {    $page = $_GET['page'];    	// setup your query to get what you want    query_posts('post_status=publish&posts_per_page=9&paged='.$page);        // the Loop	while (have_posts()) : the_post();		jboil_printPost("homepage");    endwhile;    // Reset Query    wp_reset_query();    die();}add_action('wp_ajax_jboil_load_more', 'jboil_load_more');add_action('wp_ajax_nopriv_jboil_load_more', 'jboil_load_more');// Print current postfunction jboil_printPost($area) {	if ($area == "homepage") {		require("homepage-post.php");	}}// Modify excerpt lengthfunction jboil_custom_excerpt_length( $length ) {	return 80;}add_filter( 'excerpt_length', 'jboil_custom_excerpt_length', 999 );//Customize the JBoil comments fields with HTML5 form elementsfunction jboil_comments() {	$req = get_option('require_name_email');	$fields =  array(		'author' => '<p class="comment-form-author">' . '<label for="author">' . __( 'Name' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input class="form-control" id="author" name="author" type="text" value="' . esc_attr( $commenter['comment_author'] ) . '" size="30"' . $aria_req . ' placeholder = "What can we call you?"' . ( $req ? ' required' : '' ) . '/></p>',		'email'  => '<p class="comment-form-email"><label for="email">' . __( 'Email' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input class="form-control" id="email" name="email" type="email" value="' . esc_attr(  $commenter['comment_author_email'] ) . '" size="30"' . $aria_req . ' placeholder="How can we reach you?"' . ( $req ? ' required' : '' ) . ' /></p>',		'url'    => '<p class="comment-form-url"><label for="url">' . __( 'Website' ) . '</label>' .		            '<input class="form-control" id="url" name="url" type="url" value="' . esc_attr( $commenter['comment_author_url'] ) . '" size="30" placeholder="Have you got a website?" /></p>'	);	return $fields;}// Custom comment fieldfunction jboil_commentfield() {		$commentArea = '<p class="comment-form-comment"><label style="display:none;" for="comment">' . _x( 'Comment', 'noun' ) . '</label><textarea class="form-control" id="comment" name="comment" cols="45" rows="8" aria-required="true" required placeholder="What\'s on your mind?"	></textarea></p>';	return $commentArea;}// Get custom comment argumentsfunction jboil_comment_args() {	$args = array("fields"=>jboil_comments(), "comment_field"=> jboil_commentfield(), "comment_notes_after" => "");		return $args;}// Add Scriptsfunction jboil_scripts() {	// Styles		wp_register_style('bootstrap-style', get_stylesheet_directory_uri() . '/css/bootstrap.css');	wp_register_style('bootstrap-theme', get_stylesheet_directory_uri() . '/css/bootstrap-theme.css', array('bootstrap-style'));	wp_enqueue_style('bootstrap-style');	wp_enqueue_style('bootstrap-theme');	wp_enqueue_style('fonts', get_stylesheet_directory_uri() . '/fonts/stylesheet.css');	wp_enqueue_style('jblog-style', get_stylesheet_uri(), array('bootstrap-theme'));	wp_enqueue_style('jblog-custom', get_stylesheet_directory_uri()."/css/custom-style.css",array('jblog-style'));		// Scripts	wp_enqueue_script('bootstrap', get_stylesheet_directory_uri() . '/js/bootstrap.js', array('jquery'), null,true);	wp_enqueue_script('modernizr', get_stylesheet_directory_uri() . '/js/modernizr.js', array('jquery'), null,true);	wp_enqueue_script('selectivizr', get_stylesheet_directory_uri() . '/js/selectivizr.js', array('jquery'), null, true);	wp_enqueue_script('imgLiquid', get_stylesheet_directory_uri() . '/js/imgLiquid.js', array('jquery'), null, true);	wp_enqueue_script('jblog', get_stylesheet_directory_uri() . '/js/scripts.js', array('jquery'), null, true);}add_action( 'wp_enqueue_scripts', 'jboil_scripts');// Change hex colors to rgbafunction hex2rgb($hex) {   $hex = str_replace("#", "", $hex);   if(strlen($hex) == 3) {      $r = hexdec(substr($hex,0,1).substr($hex,0,1));      $g = hexdec(substr($hex,1,1).substr($hex,1,1));      $b = hexdec(substr($hex,2,1).substr($hex,2,1));   } else {      $r = hexdec(substr($hex,0,2));      $g = hexdec(substr($hex,2,2));      $b = hexdec(substr($hex,4,2));   }   $rgb = array($r, $g, $b, .8);   return implode(",", $rgb); // returns the rgb values separated by commas   //return $rgb; // returns an array with the rgb values}?>